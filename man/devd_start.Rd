% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/devd.r
\name{devd_start}
\alias{devd_start}
\title{Start up a devd process}
\usage{
devd_start(routes = ".", log_headers = FALSE, live_reload = FALSE,
  live_watch = FALSE, basic_auth = NULL, open_browser = TRUE,
  tls = FALSE, crossdomain = TRUE)
}
\arguments{
\item{routes}{a character vector of \code{devd} \href{https://github.com/cortesi/devd#routes}{routes} to setup}

\item{log_headers}{Log HTTP headers for each rquest}

\item{live_reload}{When \code{live_reload} is enabled, \code{devd} injects a small script into HTML pages, just before the closing head tag. The script listens for change notifications over a websocket connection, and reloads resources as needed. No browser addon is required, and \code{live_reload} works even for reverse proxied apps. If only changes to CSS files are seen, devd will only reload external CSS resources, otherwise a full page reload is done}

\item{live_watch}{Enales \code{live_reload} and watch for static file changes}

\item{basic_auth}{Supply a vector of \code{c("username", "password")} to enable basic auth for server (forces all requests to be authenticated)}

\item{open_browser}{if \code{TRUE} then your default OS browser will be launched and pointed to the main route path}

\item{tls}{Serve TLS with auto-generated self-signed certificate (in \code{~/.devd.cert})}

\item{crossdomain}{if \code{TRUE} then we set the CORS header \code{Access-Control-Allowed: *}}
}
\value{
\code{processx} process object
}
\description{
The creates a background \code{devd} process and returns a \code{processx} handle to it.
}
\details{
The default configuration (which should cover most use-cases) is to:
\itemize{
\item have the current working directory be the only route
\item open an OS browser on process creation
\item enable full cross-domain resource support
}

The returned \code{\link[processx:process]{processx::process()}} object lets you introspect the process, kill the
process and return the last filled buffer from the error and "access" logs.

NOTE: IF you restart, terminate, close, etc the calling R process that started
an underlying \code{devd} process you will need to start \code{devd} again (it's a child
process of R). This is intentional as it should prevent you from leaving
stale \code{devd} processes hanging around.
}
\examples{
\dontrun{
dd <- devd_start()
devd_log(dd)
devd_stop(dd)
}
}
